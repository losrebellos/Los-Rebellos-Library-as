package losrebellos.math {	import losrebellos.utils.ArrayUtils;	/**	 * 	 * @author los rebellos	 * 	 */	public final class MathUtils	{		/*		 *		 * CONSTANTS		 *		 */		public static const GOLDEN_RATIO:Number = 1.6180339887;				/*		 * 		 * MATH		 * rewriting of the Math class because it's too slow		 * 		 */		////////////////////////////////////////////////////////////////////////////////////////////////////////////		////////////////////////////////////////////////////////////////////////////////////////////////////////////		////////////////////////////////////////////////////////////////////////////////////////////////////////////		//PI		private static var _PI:Number = 0;		public static function get PI():Number		{			if(_PI == 0)			{				_PI = Math.PI;			}						return _PI;		}		//min		public static function min(x:Number = undefined, y:Number = undefined):Number		{			return (x > y) ? y : x;		}		public static function multipleMin(...args:*):Number		{			if(args.length < 2)			{				throw new Error("MathUtils.multipleMin: need at least 2 arguments");			}						var min:Number = args[0];			for(var i:int = 0; i<args.length; i++)			{				if(args[i] < min)				{					min = args[i];				}			}						return min;		}		//max		public static function max(x:Number = undefined, y:Number = undefined):Number		{			return (x < y) ? y : x;		}		public static function multipleMax(...args:*):Number		{			if(args.length < 2)			{				throw new Error("MathUtils.multipleMax: need at least 2 arguments");			}						var max:Number = args[0];			for(var i:int = 0; i<args.length; i++)			{				if(args[i] > max)				{					max = args[i];				}			}						return max;		}		//abs		public static function abs(x:Number):Number		{			return (x < 0) ? -x : x;		}		//floor		public static function floor(x:Number):int		{			return int(x);		}		//ceil		public static function ceil(x:Number):int		{			return (x % 1) ? (int(x) + 1) : x;		}		//floor		public static function round(x:Number):int		{			return int(x + .5);		}		//pow		public static function pow(x:Number, y:int):Number		{			var sum:Number = 1;			for(var i:int = 0; i<y; i++)			{				sum *= x;			}						return sum;		}		////////////////////////////////////////////////////////////////////////////////////////////////////////////		////////////////////////////////////////////////////////////////////////////////////////////////////////////		////////////////////////////////////////////////////////////////////////////////////////////////////////////								/*		 * 		 * RANDOM		 * 		 */		//real		public static function randomRealIntervals(...args):Number		{			if(args.length > 1)			{				return randomRealInterval(ArrayUtils.getRandomInArray(args));			}						return randomRealInterval(args[0]);		}		public static function randomRealInterval(interval:Interval):Number		{			if(interval.correct)			{				return randomReal(interval.min,interval.max);			}						return interval.min;		}		public static function randomReal(min:Number,max:Number):Number		{			return Math.random() * (1 + max - min) + min;		}		//integer		public static function randomIntegerIntervals(...args):Number		{			if(args.length > 1)			{				return randomIntegerInterval(ArrayUtils.getRandomInArray(args));			}						return randomIntegerInterval(args[0]);		}		public static function randomIntegerInterval(interval:Interval):Number		{			if(interval.correct)			{				return randomInteger(interval.min,interval.max);			}						return interval.min;		}		public static function randomInteger(min:Number,max:Number):Number		{			return floor(Math.random() * (1 + max - min)) + min;		}						/*		 * 		 * TRIGONOMETRY		 * 		 */		public static function degreesToRadians(degrees:Number):Number		{			return degrees * PI / 180;		}		public static function radiansToDegrees(radians:Number):Number		{			return radians * 180 / PI;		}						/*		 * 		 * UTILS		 * 		 */		//get the round with x zero precision		public static function roundExtra(num:Number, precision:int):Number		{			var precise:int = pow(10, precision);			return floor( precise * num ) / precise;		}		//check percent		public static function correctPercent(percent:Number):Number		{			return ( percent > 1 ) ? ( 1 ) : ( percent < 0 ? 0 : percent );		}			}}