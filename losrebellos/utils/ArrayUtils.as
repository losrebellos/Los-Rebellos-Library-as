package losrebellos.utils {	import losrebellos.math.Interval;		import losrebellos.math.MathUtils;	/*	 *	 * @author los rebellos	 *	 */	public class ArrayUtils {				//----- VARIABLES -----//		public var position:int = 0;		public var element:* = null;		public var type:String = "";						//----- CONSTRUCTOR -----//		//array element		public function ArrayUtils(_position:int, _element:*){			position = _position;			element = _element;			type = String(element);		}		public function toString():String		{			return "position: " + position + " // element: " + element + " // type: " + type;		}						//----- MERGE 2 ARRAYS -----//		public static function merge(tab_1:Array, tab_2:Array):Array		{			if(tab_1 && tab_2)				return tab_1.concat(tab_2);						else if(tab_1)				return tab_1;						else if(tab_2)				return tab_2;						return null;		}				//----- DELETE EMPTY CELLS -----//		public static function clean(tab:Array):Array		{			var new_tab:Array = [];			for(var i:Number = 0;i<tab.length;i++)			{				if(tab[i] != null && tab[i] != "")					new_tab.push(tab[i]);			}			return new_tab;		}						//----- CHECK IF AN ELEMENT IS IN AN ARRAY -----//		// return the position if is in		// return -1 if not		public static function isInArray(tab:Array,element:*,param:*=null):int		{			for(var i:Number = 0;i<tab.length;i++)			{				if(param)				{					if(tab[i][param] == element)						return i;				}				else				{					if(tab[i] == element)						return i;				}			}			return -1;		}						//----- GET A RANDOM ELEMENT IN AN ARRAY -----//		// return the position if is in		// return -1 if not		public static function getRandomInArray(tab:Array):ArrayUtils		{			var i:int = MathUtils.randomIntegerInterval(new Interval(0, tab.length - 1));			return new ArrayUtils(i,tab[i]);		}						//----- COMPARE 2 ARRAY -----//		public static function compare(tab_1:Array, tab_2:Array):Boolean		{			if(tab_1.length == tab_2.length)			{				for(var i:int = 0; i<tab_1.length;i++)					if(tab_1[i] != tab_2[i])						return false;			}			else				return false;						return true;		}						//----- SWAP 2 ELEMENTS -----//		public static function swap(tab:Array, i:int, j:int):void		{			var val:* = tab[i];			tab[i] = tab[j];			tab[j] = val;		}						/*		 * 		 * REMOVE AN ELEMENT OF AN ARRAY		 * 		 */		public static function remove(tab:Array, element:*):Array		{			var new_tab:Array = tab;			new_tab.splice(new_tab.indexOf(element),1);			return new_tab;		}						/*		 * 		 * COPY AN ARRAY		 * 		 */		public static function copy(tab:Array):Array		{			return tab.slice();		}	}}