package losrebellos.utils {	import losrebellos.math.MathUtils;	/*	 *	 * @author los rebellos	 *	 */	public class ArrayUtils 	{		/*		 * 		 * MERGE		 * 		 */		public static function merge(tab_1:Array, tab_2:Array):Array		{			if(tab_1 && tab_2)				return tab_1.concat(tab_2);						else if(tab_1)				return tab_1;						else if(tab_2)				return tab_2;						return null;		}				/*		 * 		 * CLEAN		 * 		 * delete empty cells		 * 		 */		public static function clean(tab:Array):Array		{			var _tab:Array = [];						for(var i:Number = 0; i<tab.length; i++)				if(tab[i] != null && tab[i] != "")					_tab.push(tab[i]);						return _tab;		}				/*		 *		 * IS IN ARRAY		 * 		 * return the position if is in		 * return -1 if not		 *		 */		public static function isInArray(tab:Array, element:*, param:* = null):int		{			for(var i:Number = 0; i<tab.length; i++)			{				if(param)				{					if(tab[i][param] == element)						return i;				}				else				{					if(tab[i] == element)						return i;				}			}			return -1;		}				/*		 *		 * GET A RANDOM ELEMENT IN AN ARRAY		 * 		 * return the position if is in		 * return -1 if not		 *		 */		public static function getRandomInArray(tab:Array):*		{			return tab[MathUtils.randomIntegerSimple(0, tab.length - 1)];		}				/*		 * 		 * COMPARE 2 ARRAY		 * 		 */		public static function compare(tab_1:Array, tab_2:Array):Boolean		{			if(tab_1.length == tab_2.length)			{				for(var i:int = 0;i < tab_1.length;i++)					if(tab_1[i] != tab_2[i])						return false;			}			else				return false;						return true;		}				/*		 * 		 * SWAP 2 ELEMENTS		 * 		 */		public static function swap(tab:Array, i:int, j:int):void		{			var val:* = tab[i];			tab[i] = tab[j];			tab[j] = val;		}				/*		 * 		 * REMOVE AN ELEMENT OF AN ARRAY		 * 		 */		public static function remove(tab:Array, id:int):Array		{			return merge(copy(tab).splice(0, id), copy(tab).splice(id + 1, tab.length - 1));		}		public static function removeElement(tab:Array, searchElement:*):Array		{			return remove(tab, tab.indexOf(searchElement));			//			var new_tab:Array = tab;//			new_tab.splice(new_tab.indexOf(searchElement), 1);//			return new_tab;		}				/*		 * 		 * COPY AN ARRAY		 * 		 */		public static function copy(tab:Array):Array		{			return tab.slice();		}	}}