package losrebellos.lospistoleros.data {	import losrebellos.events.EventDispatcherPlus;	import losrebellos.lospistoleros.constants.PConstants;	import flash.display.Loader;	import flash.errors.IllegalOperationError;	import flash.system.ApplicationDomain;	import flash.text.Font;	import flash.utils.Dictionary;	/*	 *	 * @author los rebellos	 *	 */	public class Fonts extends EventDispatcherPlus 	{		/*		 * 		 * VARIABLES		 * 		 */		private var _dict:Dictionary = new Dictionary;				/*		 * 		 * CONSTRUCTOR		 * 		 */		public function Fonts(singleton:SingletonEnforcer)		{			super();							if(!singleton)				throw new IllegalOperationError(">>>>> Fonts class is a singleton");		}						/*		 * 		 * SINGLETON		 * 		 */		private static var _instance:Fonts = null;		public static function get instance():Fonts		{			if(!_instance)				_instance = new Fonts(new SingletonEnforcer);						return _instance;		}						/*		 * 		 * REGISTER & USE		 * 		 */		public function register(tab:Array):void		{			var loader:Loader = Assets.instance.getMovieClip(PConstants.FONTS).loaderInfo.loader;			var app:ApplicationDomain = loader.contentLoaderInfo.applicationDomain;						for (var i:int = 0; i<tab.length; i++)				add(String(tab[i]), getFontClass(app, tab[i]));		}		public function getFont(name:String):Font		{			var fontClass:Class = _dict[name];			if(fontClass)				return new fontClass as Font;						return null;		}		public function getFontName(name:String):String		{			var font:Font = getFont(name);			if(font)				return font.fontName;						return "";		}		public function add(name:String, font:Class):void		{			Font.registerFont(font);			_dict[name] = font;		}				/*		 * 		 * UTILS		 * 		 */		private function getFontClass(app:ApplicationDomain, name:String):Class {			return app.getDefinition(name) as Class;		}	}}class SingletonEnforcer {}