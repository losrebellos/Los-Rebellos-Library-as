package losrebellos.lospistoleros.data {	import br.com.stimuli.loading.BulkLoader;	import br.com.stimuli.loading.BulkProgressEvent;	import br.com.stimuli.loading.loadingtypes.LoadingItem;	import losrebellos.bulkloader.BulkLoaderPlus;	import losrebellos.console.Console;	import losrebellos.lospistoleros.components.application.PApplicationSprite;	import losrebellos.lospistoleros.constants.PConstants;	import losrebellos.lospistoleros.events.PPreloaderEvent;	import flash.errors.IllegalOperationError;	import flash.events.ErrorEvent;	import flash.events.Event;	/*	 *	 * @author los rebellos	 *	 */	public class Assets extends BulkLoaderPlus	{		/*		 * 		 * VARIABLES		 * 		 */		private var _xml:XML;				/*		 * 		 * CONSTRUCTOR		 * 		 */		public function Assets(singleton:SingletonEnforcer)		{			super("pistoleros/assets");						if(!singleton)				throw new IllegalOperationError(">>>>> Assets class is a singleton");		}				/*		 * 		 * SINGLETON		 * 		 */		private static var _instance:Assets = null;		public static function get instance():Assets		{			if(!_instance)				_instance = new Assets(new SingletonEnforcer);						return _instance;		}						/*		 * 		 * ADD		 * 		 */		override public function add(url : *, props : Object= null ) : LoadingItem		{			var loading_item:LoadingItem = super.add(url, props);			loading_item.addEventListener(BulkProgressEvent.PROGRESS, itemProgressHandler);			loading_item.addEventListener(BulkLoader.COMPLETE, itemCompleteHandler);			loading_item.addEventListener(BulkLoader.ERROR, errorHandler);			return loading_item;		}		private function itemProgressHandler(e:BulkProgressEvent):void		{			//item progress handler		}		private function itemCompleteHandler(e:Event):void		{			var loading_item:LoadingItem = e.currentTarget as LoadingItem;			loading_item.removeEventListener(BulkProgressEvent.PROGRESS, itemProgressHandler);			loading_item.removeEventListener(BulkLoader.COMPLETE, itemCompleteHandler);			loading_item.removeEventListener(BulkLoader.ERROR, errorHandler);						//content & fonts			switch(loading_item.id)			{				case PConstants.FONTS:					this.dispatchEvent(new PPreloaderEvent(PPreloaderEvent.FONTS_COMPLETE));					break;				case PConstants.CONTENT:					this.dispatchEvent(new PPreloaderEvent(PPreloaderEvent.CONTENT_COMPLETE));					break;				case PConstants.CSS:					this.dispatchEvent(new PPreloaderEvent(PPreloaderEvent.CSS_COMPLETE));					break;			}		}		private function errorHandler(e:ErrorEvent):void		{			var loading_item:LoadingItem = e.currentTarget as LoadingItem;			loading_item.removeEventListener(BulkProgressEvent.PROGRESS, itemProgressHandler);			loading_item.removeEventListener(BulkLoader.COMPLETE, itemCompleteHandler);			loading_item.removeEventListener(BulkLoader.ERROR, errorHandler);						Console.output(this, "item error: " + e);		}						/*		 * 		 * XML		 * 		 */		public function setXML(xml:XML, _language:String):void		{			_xml = xml;						//normal assets			var xml_list_assets:XMLList = _xml["asset"];			for(var i:int = 0; i<xml_list_assets.length(); i++)				this.add(PConstants.ASSETS_FOLDER + xml_list_assets[i].@src, {id: xml_list_assets[i].@id, type: xml_list_assets[i].@type});						//content assets			var xml_list_contents:XMLList = _xml["content"]["asset"];			for(var j:int = 0; j<xml_list_contents.length(); j++)				//localization				if(xml_list_contents[j].@id == _language)				{					this.add(PConstants.ASSETS_FOLDER + xml_list_contents[j].@src, {id: PConstants.CONTENT, type: xml_list_contents[j].@type});										//fonts					var xml_list_fonts:XMLList = xml_list_contents[j]["font"];					for(var k:int = 0; k<xml_list_fonts.length(); k++)						this.add(PConstants.ASSETS_FOLDER + xml_list_fonts[k].@src, {id: PConstants.FONTS, type: xml_list_fonts[k].@type});										/*					//css					var xml_list_css:XMLList = xml_list_contents[j]["css"];					for(var l:int = 0; l<xml_list_css.length(); l++)						this.add(PConstants.ASSETS_FOLDER + xml_list_css[l].@src, {id: PConstants.CSS, type: xml_list_css[l].@type});						 * 						 */				}		}				/*		 * 		 * INDEX		 * 		 */		public function getIndex():PApplicationSprite		{			return this.getContent(PConstants.INDEX) as PApplicationSprite;		}	}}class SingletonEnforcer {}