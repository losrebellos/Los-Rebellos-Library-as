package losrebellos.lospistoleros.components.preloader {	import losrebellos.console.Console;			import br.com.stimuli.loading.BulkLoader;	import br.com.stimuli.loading.BulkProgressEvent;		import losrebellos.lospistoleros.components.application.PApplicationSprite;	import losrebellos.lospistoleros.constants.PConstants;	import losrebellos.lospistoleros.core.model.PModel;	import losrebellos.lospistoleros.data.Assets;	import losrebellos.lospistoleros.data.Content;	import losrebellos.lospistoleros.data.Fonts;	import losrebellos.lospistoleros.data.SWF;	import losrebellos.lospistoleros.data.TextFormats;	import losrebellos.lospistoleros.events.PPreloaderEvent;	import losrebellos.lospistoleros.vo.StageVO;		import flash.events.ErrorEvent;	import flash.events.Event;	import flash.events.ProgressEvent;	import flash.net.URLLoader;	import flash.net.URLLoaderDataFormat;	import flash.net.URLRequest;		/*	 *	 * @author los rebellos	 *	 */	public class PPreloaderModel extends PModel 	{		/*		 * 		 * VARIABLES		 * 		 */				//can be overridden in case you want different params		protected var url_assets:String = PConstants.XML_ASSETS;		protected var url_index:String = PConstants.INDEX;		protected var stage_vo:StageVO = StageVO.TOP_LEFT_NO_SCALE_BEST;		protected var language:String = Content.DEFAULT_LANGUAGE;				//data		private var assets_loader:URLLoader;						/*		 * 		 * CONSTRUCTOR		 * 		 */		public function PPreloaderModel() {			super();		}				/*		 * 		 * LOAD		 * 		 */		public function load():void		{			assets_loader = new URLLoader;			assets_loader.dataFormat = URLLoaderDataFormat.TEXT;			assets_loader.addEventListener(ProgressEvent.PROGRESS, progressAssetsXMLHandler);			assets_loader.addEventListener(Event.COMPLETE, completeAssetsXMLHandler);			assets_loader.addEventListener(ErrorEvent.ERROR, errorHandler);			assets_loader.load(new URLRequest(url_assets));		}						/*		 * 		 * COMPLETE HANDLERS		 * 		 */		protected function completeAssetsXMLHandler(e:Event):void		{			assets_loader.removeEventListener(ProgressEvent.PROGRESS, progressAssetsXMLHandler);			assets_loader.removeEventListener(Event.COMPLETE, completeAssetsXMLHandler);			assets_loader.removeEventListener(ErrorEvent.ERROR, errorHandler);						Assets.instance.setXML(XML(e.target["data"]), language);			Assets.instance.add(url_index, {id: PConstants.INDEX, type: BulkLoader.TYPE_MOVIECLIP});			Assets.instance.addEventListener(BulkProgressEvent.PROGRESS, progressAssetsHandler);			Assets.instance.addEventListener(BulkLoader.COMPLETE, completeAssetsHandler);			Assets.instance.addEventListener(PPreloaderEvent.CONTENT_COMPLETE, contentCompleteHandler);			Assets.instance.addEventListener(PPreloaderEvent.FONTS_COMPLETE, fontsCompleteHandler);			Assets.instance.addEventListener(PPreloaderEvent.CSS_COMPLETE, cssCompleteHandler);			Assets.instance.addEventListener(BulkLoader.ERROR, errorHandler);			Assets.instance.start(3);		}		protected function completeAssetsHandler(e:Event):void		{			Assets.instance.removeEventListener(BulkProgressEvent.PROGRESS, progressAssetsHandler);			Assets.instance.removeEventListener(BulkLoader.COMPLETE, completeAssetsHandler);			Assets.instance.removeEventListener(PPreloaderEvent.CONTENT_COMPLETE, contentCompleteHandler);			Assets.instance.removeEventListener(PPreloaderEvent.FONTS_COMPLETE, fontsCompleteHandler);			Assets.instance.removeEventListener(PPreloaderEvent.CSS_COMPLETE, cssCompleteHandler);			Assets.instance.removeEventListener(BulkLoader.ERROR, errorHandler);						setAssets();						this.dispatchEvent(new PPreloaderEvent(PPreloaderEvent.COMPLETE));		}		protected function setAssets():void		{			Console.output(this, "You need to set your assets here");		}						/*		 * 		 * GENERAL HANDLERS		 * 		 */		protected function progressAssetsXMLHandler(e:ProgressEvent):void		{//			this.dispatchEvent(new PPreloaderEvent(PPreloaderEvent.PROGRESS, calculatePercent(e.bytesLoaded / e.bytesTotal)));		}		protected function progressAssetsHandler(e:BulkProgressEvent):void		{			this.dispatchEvent(new PPreloaderEvent(PPreloaderEvent.PROGRESS, calculatePercent(e.percentLoaded)));		}		protected function errorHandler(e:ErrorEvent):void		{			this.dispatchEvent(new PPreloaderEvent(PPreloaderEvent.ERROR));		}		protected function calculatePercent(p:Number):Number		{			return Math.round( 100 * p ) / 100;		}						/*		 * 		 * SPECIFIC ASSETS		 * 		 */		protected function fontsCompleteHandler(e:PPreloaderEvent):void		{			Assets.instance.removeEventListener(PPreloaderEvent.FONTS_COMPLETE, fontsCompleteHandler);						var tab_classes:Array = SWF.parse(Assets.instance.getByteArray(PConstants.FONTS));			Fonts.instance.register(tab_classes);			Console.output(this, "Fonts registered");		}		protected function contentCompleteHandler(e:PPreloaderEvent):void		{			Assets.instance.removeEventListener(PPreloaderEvent.CONTENT_COMPLETE, contentCompleteHandler);						Content.instance.register(Assets.instance.getXML(PConstants.CONTENT));			Console.output(this, "Content registered");		}		protected function cssCompleteHandler(e:PPreloaderEvent):void		{			Assets.instance.removeEventListener(PPreloaderEvent.CSS_COMPLETE, cssCompleteHandler);						TextFormats.instance.registerStyleSheetFromAssets(PConstants.CSS);			Console.output(this, "CSS registered");		}				/*		 * 		 * DATA		 * 		 */		public function setLanguage(_language:String):void		{			language = _language;		}		public function getStage():StageVO		{			return stage_vo;		}		public function getMain():PApplicationSprite		{			return Assets.instance.getIndex();		}	}}