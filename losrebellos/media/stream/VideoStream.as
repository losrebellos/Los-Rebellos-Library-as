package losrebellos.media.stream {	import losrebellos.events.NetStreamClientEvent;	import losrebellos.events.StreamEvent;	import losrebellos.media.Library;	import losrebellos.media.stream.IStream;	import losrebellos.net.NetStatus;	import losrebellos.net.NetStreamClient;	import losrebellos.states.StreamState;		import flash.events.AsyncErrorEvent;	import flash.events.EventDispatcher;	import flash.events.NetStatusEvent;	import flash.net.NetConnection;	import flash.net.NetStream;		/*	 *	 * @author los rebellos	 *	 */	public class VideoStream extends EventDispatcher implements IStream	{		/*		 * 		 * VARIABLES		 * 		 */		public var id:String;		public var src:String;		public var loop:int;		public var loop_counter:int;		public var state:String;				private var connection:NetConnection;		private var client:NetStreamClient;		public var stream:NetStream;				/*		 * 		 * CONSTRUCTOR		 * 		 */		public function VideoStream(_id:String, _src:String, _loop:int = 1)		{			id = _id;			src = _src;			loop = _loop;			loop_counter = 0;			state = StreamState.NOT_STARTED;						//get to the library			if(Library.instance.getItem(id))			{				connection = new NetConnection;				connection.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);				connection.connect(null);								client = new NetStreamClient;				client.addEventListener(NetStreamClientEvent.META_DATA_LOADED, metaDataHandler);								stream = new NetStream(connection);				stream.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);				stream.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);				stream.client = client;								//add to the library				Library.instance.addItem(id, src);			}		}
		
		/*		 * 		 * DATA		 * 		 */		public function getPercentLoaded():Number		{			return stream.bytesLoaded / stream.bytesTotal;		}		public function getPercentPlayed():Number		{			if(client && client.getMetadata().duration)				return stream.time / client.getMetadata().duration;						return -1;		}				/*		 * 		 * CONTROLS		 * 		 */		public function load():void		{			stream.play(src);			stream.pause();						state = StreamState.STOPPED;		}		public function play(_percent:Number = 0, _loop:int = -1):void		{			if(_loop != -1)				loop = _loop;						stream.seek(_percent * client.getMetadata().duration);			stream.resume();						state = StreamState.PLAYING;		}		public function resume():void		{			stream.resume();						state = StreamState.PLAYING;		}		public function pause():void		{			stream.pause();						state = StreamState.PAUSED;		}		public function stop():void		{			stream.pause();			stream.close();						state = StreamState.STOPPED;		}		public function seek(_percent:Number):void		{			stream.seek(_percent * client.getMetadata().duration);		}						/*		 * 		 * NET STATUS		 * 		 */		protected function netStatusHandler(e:NetStatusEvent):void		{			switch(NetStatus.getStatus(e).code)			{				case NetStatus.PLAY_STREAM_NOT_FOUND:					playStreamNotFoundNetStatus();					break;								case NetStatus.PLAY_START:					playStart();					break;								case NetStatus.PLAY_STOP:					playStopNetStatus();					break;								case NetStatus.PAUSE:					playStopNetStatus();					break;								case NetStatus.UNPAUSE:					playStopNetStatus();					break;								case NetStatus.BUFFER_EMPTY:					bufferEmptyNetStatus();					break;								case NetStatus.BUFFER_FULL:					bufferFullNetStatus();					break;			}		}		protected function playStreamNotFoundNetStatus():void		{			this.dispatchEvent(new StreamEvent(StreamEvent.ERROR, NetStatus.PLAY_STREAM_NOT_FOUND));		}		protected function playStart():void		{			state = StreamState.PLAYING;			this.dispatchEvent(new StreamEvent(StreamEvent.PLAY));		}		protected function playStopNetStatus():void		{			state = StreamState.STOPPED;			this.dispatchEvent(new StreamEvent(StreamEvent.COMPLETE));						loop_counter++;			if(loop > 1 && loop_counter < loop)				seek(0);		}		protected function pauseNetStatus():void		{			state = StreamState.PAUSED;			this.dispatchEvent(new StreamEvent(StreamEvent.PAUSE));		}		protected function unpauseNetStatus():void		{			state = StreamState.PLAYING;			this.dispatchEvent(new StreamEvent(StreamEvent.PLAY));		}		protected function bufferEmptyNetStatus():void		{			state = StreamState.BUFFERING;			this.dispatchEvent(new StreamEvent(StreamEvent.BUFFERING));		}		protected function bufferFullNetStatus():void		{			this.dispatchEvent(new StreamEvent(StreamEvent.BUFFER_FULL));		}						/*		 * 		 * ASYNC ERROR		 * 		 */		protected function asyncErrorHandler(e:AsyncErrorEvent):void		{			this.dispatchEvent(new StreamEvent(StreamEvent.ERROR, e.type));		}				/*		 * 		 * METADATA		 * 		 */		protected function metaDataHandler(e:NetStreamClientEvent):void		{			client.removeEventListener(NetStreamClientEvent.META_DATA_LOADED, metaDataHandler);			client.metaDataToString();		}						/*		 * 		 * UTILS		 * 		 */		public function dispose():void		{			state = StreamState.STOPPED;						loop_counter = 0;						stream.pause();			stream.close();		}	}}