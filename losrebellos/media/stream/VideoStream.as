package losrebellos.media.stream {	import losrebellos.events.NetStreamClientEvent;	import losrebellos.media.Library;	import losrebellos.net.NetStatus;	import losrebellos.net.NetStreamClient;	import flash.events.AsyncErrorEvent;	import flash.events.NetStatusEvent;	import flash.net.NetConnection;	import flash.net.NetStream;	/*	 *	 * @author los rebellos	 *	 */	public class VideoStream extends Stream	{		/*		 * 		 * VARIABLES		 * 		 */		private var connection:NetConnection;		private var client:NetStreamClient;		public var stream:NetStream;				/*		 * 		 * CONSTRUCTOR		 * 		 */		public function VideoStream(_id:String, _src:String, _loop:int = 1)		{			super(_id, _src, _loop);		}						/*		 * 		 * STREAM		 * 		 */		override protected function createStream():void		{			connection = new NetConnection;			connection.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);			connection.connect(null);						client = new NetStreamClient;			client.addEventListener(NetStreamClientEvent.META_DATA_LOADED, metaDataHandler);						stream = new NetStream(connection);			stream.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);			stream.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);			stream.client = client;						//save also the stream client			Library.instance.addItem(id + "/netStreamClient", client);		}		override protected function getStream():void		{			//need to be tested!!!			client = Library.instance.getItem(id + "/netStreamClient") as NetStreamClient;			stream = Library.instance.getItem(id) as NetStream;		}		
		
		/*		 * 		 * DATA		 * 		 */		override public function getPercentLoaded():Number		{			return stream.bytesLoaded / stream.bytesTotal;		}		override public function getPercentPlayed():Number		{			if(client && client.getMetadata().duration)				return stream.time / client.getMetadata().duration;						return -1;		}				/*		 * 		 * CONTROLS		 * 		 */		override public function load():void		{			super.load();						stream.play(src);			stream.pause();		}		override public function play(_percent:Number = 0, _loop:int = -1):void		{			super.play(_percent, _loop);						stream.seek(_percent * client.getMetadata().duration);			stream.resume();		}		override public function resume():void		{			super.resume();						stream.resume();		}		override public function pause():void		{			super.pause();						stream.pause();		}		override public function stop():void		{			super.stop();						stream.pause();			stream.close();		}		override public function seek(_percent:Number):void		{			super.seek(_percent);						stream.seek(_percent * client.getMetadata().duration);		}						/*		 * 		 * NET STATUS		 * 		 */		protected function netStatusHandler(e:NetStatusEvent):void		{			switch(NetStatus.getStatus(e).code)			{				case NetStatus.PLAY_STREAM_NOT_FOUND:					playStreamNotFoundNetStatus();					break;								case NetStatus.PLAY_START:					playStart();					break;								case NetStatus.PLAY_STOP:					playStopNetStatus();					break;								case NetStatus.PAUSE:					playStopNetStatus();					break;								case NetStatus.UNPAUSE:					playStopNetStatus();					break;								case NetStatus.BUFFER_EMPTY:					bufferEmptyNetStatus();					break;								case NetStatus.BUFFER_FULL:					bufferFullNetStatus();					break;			}		}				/*		 * 		 * METADATA		 * 		 */		protected function metaDataHandler(e:NetStreamClientEvent):void		{			client.removeEventListener(NetStreamClientEvent.META_DATA_LOADED, metaDataHandler);			client.metaDataToString();		}						/*		 * 		 * UTILS		 * 		 */		override public function destroy():void		{			super.destroy();						stream.pause();			stream.close();		}	}}