package losrebellos.display.base {	import losrebellos.events.AnimationEvent;		import losrebellos.display.SpritePlus;	import losrebellos.display.IMovieClipPlus;		import flash.display.FrameLabel;	import flash.display.MovieClip;	import flash.display.Scene;	import flash.events.Event;			/*	 *	 * @author los rebellos	 *	 */	public class BaseAnimation extends SpritePlus implements IMovieClipPlus	{		/*		 * 		 * VARIABLES		 * 		 */		protected var targeted_frame:FrameLabel;		protected var frames:Array = [];				//elements		protected var animation:MovieClip;						/*		 * 		 * CONTENT		 * 		 */		override protected function createContent():void		{			animation.stop();						parseFrames();		}		override protected function addContent():void		{			this.addChild(animation);		}						/*		 * 		 * FRAME		 * 		 */		private function parseFrames():void		{			for(var i:int = 0; i<animation.currentLabels.length; i++)			{				var frame_label:FrameLabel = animation.currentLabels[i];				frames[frame_label.frame] = frame_label.name;			}		}		public function getFrameByLabel(name:String):int		{			return frames.indexOf(name);		}		public function getLabelByFrame(frame:int):String		{			return frames[frame];		}		public function get currentFrameLabel():FrameLabel		{			return new FrameLabel(animation.currentLabel, animation.currentFrame);		}						/*		 * 		 * PLAY		 * 		 */		protected function playHandler(e:Event):void		{			this.nextFrame();						if(this.currentFrame == 1)				this.dispatchEvent(new AnimationEvent(AnimationEvent.FIRST_FRAME));						if(this.currentFrame == this.totalFrames)			{				this.dispatchEvent(new AnimationEvent(AnimationEvent.LAST_FRAME));				this.gotoAndPlay(1);			}		}		public function play():void		{			this.stop();			this.addEventListener(Event.ENTER_FRAME, playHandler);		}		public function gotoAndPlay(frame:Object, scene:String = null):void		{			this.gotoAndStop(frame, scene);			this.addEventListener(Event.ENTER_FRAME, playHandler);		}						/*		 * 		 * PLAY ONCE		 * 		 */		protected function playOnceHandler(e:Event):void		{			this.nextFrame();						if(this.currentFrame == 1)				this.dispatchEvent(new AnimationEvent(AnimationEvent.FIRST_FRAME));						if(this.currentFrame == this.totalFrames)			{				this.dispatchEvent(new AnimationEvent(AnimationEvent.LAST_FRAME));				this.stop();			}		}		public function playOnce():void		{			this.stop();			this.addEventListener(Event.ENTER_FRAME, playOnceHandler);		}		public function gotoAndPlayOnce(frame:Object, scene:String = null):void		{			this.gotoAndStop(frame, scene);			this.addEventListener(Event.ENTER_FRAME, playOnceHandler);		}						/*		 * 		 * PLAY BACKWARD		 * 		 */		protected function backwardHandler(e:Event):void		{			this.prevFrame();						if(this.currentFrame == 1)			{				this.dispatchEvent(new AnimationEvent(AnimationEvent.FIRST_FRAME));				this.gotoAndPlayBackward(this.totalFrames);			}						if(this.currentFrame == this.totalFrames)				this.dispatchEvent(new AnimationEvent(AnimationEvent.LAST_FRAME));		}		public function playBackward():void		{			this.stop();			this.addEventListener(Event.ENTER_FRAME, backwardHandler);		}		public function gotoAndPlayBackward(frame : Object, scene : String = null):void		{			this.gotoAndStop(frame, scene);			this.addEventListener(Event.ENTER_FRAME, backwardHandler);		}						/*		 * 		 * PLAY BACKWARD ONCE		 * 		 */		protected function backwardOnceHandler(e:Event):void		{			this.prevFrame();						if(this.currentFrame == 1)			{				this.dispatchEvent(new AnimationEvent(AnimationEvent.FIRST_FRAME));				this.stop();			}						if(this.currentFrame == this.totalFrames)				this.dispatchEvent(new AnimationEvent(AnimationEvent.LAST_FRAME));		}		public function playBackwardOnce():void		{			this.stop();			this.addEventListener(Event.ENTER_FRAME, backwardOnceHandler);		}		public function gotoAndPlayBackwardOnce(frame:Object, scene:String = null):void		{			this.gotoAndStop(frame, scene);			this.addEventListener(Event.ENTER_FRAME, backwardOnceHandler);		}						/*		 * 		 * PLAY TO		 * 		 */		protected function playToHandler(e:Event):void		{			if(this.currentFrame < targeted_frame.frame)				this.nextFrame();			else if(this.currentFrame > targeted_frame.frame)				this.prevFrame();			else			{				this.removeEventListener(Event.ENTER_FRAME, playToHandler);				this.dispatchEvent(new AnimationEvent(AnimationEvent.STOPPED));			}		}		public function playTo(frame : Object, scene : String = null):void		{			this.stop();						if(frame is String)				targeted_frame = new FrameLabel(String(frame), frames.indexOf(frame));			else				targeted_frame = new FrameLabel("", int(frame));						this.addEventListener(Event.ENTER_FRAME, playToHandler);		}						/*		 * 		 * STOP		 * 		 */		public function gotoAndStop(frame:Object, scene:String = null):void		{			this.removeEventListener(Event.ENTER_FRAME, playHandler);			this.removeEventListener(Event.ENTER_FRAME, playOnceHandler);			this.removeEventListener(Event.ENTER_FRAME, backwardHandler);			this.removeEventListener(Event.ENTER_FRAME, backwardOnceHandler);						animation.gotoAndStop(frame, scene);						this.dispatchEvent(new AnimationEvent(AnimationEvent.STOPPED));		}		public function stop():void		{			this.removeEventListener(Event.ENTER_FRAME, playHandler);			this.removeEventListener(Event.ENTER_FRAME, playOnceHandler);			this.removeEventListener(Event.ENTER_FRAME, backwardHandler);			this.removeEventListener(Event.ENTER_FRAME, backwardOnceHandler);						animation.stop();						this.dispatchEvent(new AnimationEvent(AnimationEvent.STOPPED));		}						/*		 * 		 * MOVIECLIP METHODS		 * 		 */		public function get currentLabels():Array		{			return animation.currentLabels;		}		public function get currentLabel():String		{			return animation.currentLabel;		}		public function get totalFrames():int		{			return animation.totalFrames;		}		public function prevScene():void		{			animation.prevScene();		}		public function addFrameScript(...args):void		{			animation.addFrameScript();		}		public function nextFrame():void		{			animation.nextFrame();		}		public function get enabled():Boolean		{			return animation.enabled;		}		public function get framesLoaded():int		{			return animation.framesLoaded;		}		public function get scenes():Array		{			return animation.scenes;		}		public function nextScene():void		{			animation.nextScene();		}		public function get currentFrame():int		{			return animation.currentFrame;		}		public function set enabled(value:Boolean):void		{			animation.enabled = value;		}		public function get currentScene():Scene		{			return animation.currentScene;		}		public function set trackAsMenu(value:Boolean) : void		{			animation.trackAsMenu = value;		}		public function get trackAsMenu():Boolean		{			return animation.trackAsMenu;		}		public function prevFrame():void		{			animation.prevFrame();		}	}}