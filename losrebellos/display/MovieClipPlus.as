package losrebellos.display {	import losrebellos.console.Console;	import losrebellos.display.IMovieClipPlus;	import losrebellos.events.AnimationEvent;	import losrebellos.interfaces.IButton;	import losrebellos.interfaces.IMotion;	import losrebellos.interfaces.IMouse;	import losrebellos.interfaces.IPlus;		import flash.display.DisplayObject;	import flash.display.FrameLabel;	import flash.display.MovieClip;	import flash.events.Event;	import flash.geom.Rectangle;		/*	 *	 * @author los rebellos	 *	 */	public class MovieClipPlus extends MovieClip implements IMovieClipPlus, IPlus, IMotion, IMouse, IButton	{		/*		 * 		 * VARIABLES		 * 		 */		protected var targeted_frame:FrameLabel;		protected var frames:Array = [];				/*		 * 		 * CONSTRUCTOR		 * 		 */		public function MovieClipPlus() {			super();						parseFrames();						createContent();			addContent();		}						/*		 * 		 * CONTENT		 * 		 */		protected function createContent():void		{					}		protected function addContent():void		{					}						/*		 * 		 * MOTION		 * 		 */		public function animateIn():void		{					}		public function animateOut():void		{					}						/*		 * 		 * SETTER & GETTER		 * 		 */		public function set scale(value:Number):void		{			this.scaleX = this.scaleY = value;		}		public function get scale():Number		{			return (this.scaleX + this.scaleY) / 2;		}		public function set index(value:int):void		{			this.setIndex(value);		}		public function get index():int		{			return this.getIndex();		}				/*		 * 		 * INDEX UTILS		 * 		 */		protected function setIndex(value : int):Boolean		{			if(parent)			{				parent.setChildIndex(this, value);				return true;			}			else			{				Console.output(this, "setIndex:");				Console.output("", "- parent: " + parent);				Console.output("", "");			}			return false;		}		protected function getIndex():int		{			if(parent)				return parent.getChildIndex(this);			else			{				Console.output(this, "getIndex:");				Console.output("", "- parent: " + parent);				Console.output("", "");			}			return -1;		}		public function setTopIndex():int		{			if(parent)			{				parent.setChildIndex(this, parent.numChildren - 1);				return parent.numChildren - 1;			}			else			{				Console.output(this, "setTopIndex:");				Console.output("", "- parent: " + parent);				Console.output("", "");			}			return -1;		}						/*		 * 		 * MOUSE		 * 		 */		public function set mouse(value:Boolean):void		{			this.mouseEnabled = this.mouseChildren = value;		}		public function get mouse():Boolean		{			return !this.mouseEnabled && !this.mouseChildren;		}		public function set button(value:Boolean):void		{			this.buttonMode = this.useHandCursor = value;		}		public function get button():Boolean		{			return !this.buttonMode && !this.useHandCursor;		}						/*		 * 		 * EVENTS		 * 		 */		override public function addEventListener(type:String, listener:Function, useCapture:Boolean = false, priority:int = 0, useWeakReference:Boolean = false):void		{			super.addEventListener(type, listener, useCapture, priority, true);		}						/*		 * 		 * UTILS		 * 		 */		public function dispose(e:Event = null):DisplayObject		{			if(parent)			{				this.stop();				return parent.removeChild(this);			}			else			{				Console.output(this, "dispose:");				Console.output("", "- parent: " + parent);				Console.output("", "- event: " + e);				Console.output("", "");			}			return null;		}		public function removeAllChildren():void		{			while(this.numChildren)				this.removeChildAt(0);		}						/*		 * 		 * RESIZE		 * 		 */		public function resize(rect:Rectangle):void		{					}						/*		 * 		 * FRAME		 * 		 */		private function parseFrames():void		{			for(var i:int = 0; i<this.currentLabels.length; i++)			{				var frame_label:FrameLabel = this.currentLabels[i];				frames[frame_label.frame] = frame_label.name;			}		}		public function getFrameByLabel(name:String):int		{			return frames.indexOf(name);		}		public function getLabelByFrame(frame:int):String		{			return frames[frame];		}		public function get currentFrameLabel():FrameLabel		{			return new FrameLabel(this.currentLabel, this.currentFrame);		}						/*		 * 		 * PLAY		 * 		 */		protected function playHandler(e:Event):void		{			this.nextFrame();						if(this.currentFrame == 1)				this.dispatchEvent(new AnimationEvent(AnimationEvent.FIRST_FRAME));						if(this.currentFrame == this.totalFrames)			{				this.dispatchEvent(new AnimationEvent(AnimationEvent.LAST_FRAME));				this.gotoAndPlay(1);			}		}		override public function play():void		{			this.stop();			this.addEventListener(Event.ENTER_FRAME, playHandler);		}		override public function gotoAndPlay(frame:Object, scene:String = null):void		{			this.gotoAndStop(frame, scene);			this.addEventListener(Event.ENTER_FRAME, playHandler);		}						/*		 * 		 * PLAY ONCE		 * 		 */		protected function playOnceHandler(e:Event):void		{			this.nextFrame();						if(this.currentFrame == 1)				this.dispatchEvent(new AnimationEvent(AnimationEvent.FIRST_FRAME));						if(this.currentFrame == this.totalFrames)			{				this.dispatchEvent(new AnimationEvent(AnimationEvent.LAST_FRAME));				this.stop();			}		}		public function playOnce():void		{			this.stop();			this.addEventListener(Event.ENTER_FRAME, playOnceHandler);		}		public function gotoAndPlayOnce(frame:Object, scene:String = null):void		{			this.gotoAndStop(frame, scene);			this.addEventListener(Event.ENTER_FRAME, playOnceHandler);		}						/*		 * 		 * PLAY BACKWARD		 * 		 */		protected function backwardHandler(e:Event):void		{			this.prevFrame();						if(this.currentFrame == 1)			{				this.dispatchEvent(new AnimationEvent(AnimationEvent.FIRST_FRAME));				this.gotoAndPlayBackward(this.totalFrames);			}						if(this.currentFrame == this.totalFrames)				this.dispatchEvent(new AnimationEvent(AnimationEvent.LAST_FRAME));		}		public function playBackward():void		{			this.stop();			this.addEventListener(Event.ENTER_FRAME, backwardHandler);		}		public function gotoAndPlayBackward(frame : Object, scene : String = null):void		{			this.gotoAndStop(frame, scene);			this.addEventListener(Event.ENTER_FRAME, backwardHandler);		}						/*		 * 		 * PLAY BACKWARD ONCE		 * 		 */		protected function backwardOnceHandler(e:Event):void		{			this.prevFrame();						if(this.currentFrame == 1)			{				this.dispatchEvent(new AnimationEvent(AnimationEvent.FIRST_FRAME));				this.stop();			}						if(this.currentFrame == this.totalFrames)				this.dispatchEvent(new AnimationEvent(AnimationEvent.LAST_FRAME));		}		public function playBackwardOnce():void		{			this.stop();			this.addEventListener(Event.ENTER_FRAME, backwardOnceHandler);		}		public function gotoAndPlayBackwardOnce(frame:Object, scene:String = null):void		{			this.gotoAndStop(frame, scene);			this.addEventListener(Event.ENTER_FRAME, backwardOnceHandler);		}						/*		 * 		 * PLAY TO		 * 		 */		protected function playToHandler(e:Event):void		{			if(this.currentFrame < targeted_frame.frame)				this.nextFrame();			else if(this.currentFrame > targeted_frame.frame)				this.prevFrame();			else			{				this.removeEventListener(Event.ENTER_FRAME, playToHandler);				this.dispatchEvent(new AnimationEvent(AnimationEvent.STOPPED));			}		}		public function playTo(frame : Object, scene : String = null):void		{			this.stop();						if(frame is String)				targeted_frame = new FrameLabel(String(frame), frames.indexOf(frame));			else				targeted_frame = new FrameLabel("", int(frame));						this.addEventListener(Event.ENTER_FRAME, playToHandler);		}						/*		 * 		 * STOP		 * 		 */		override public function gotoAndStop(frame : Object, scene : String = null):void		{			this.removeEventListener(Event.ENTER_FRAME, playHandler);			this.removeEventListener(Event.ENTER_FRAME, playOnceHandler);			this.removeEventListener(Event.ENTER_FRAME, backwardHandler);			this.removeEventListener(Event.ENTER_FRAME, backwardOnceHandler);						super.gotoAndStop(frame, scene);						this.dispatchEvent(new AnimationEvent(AnimationEvent.STOPPED));		}		override public function stop():void		{			this.removeEventListener(Event.ENTER_FRAME, playHandler);			this.removeEventListener(Event.ENTER_FRAME, playOnceHandler);			this.removeEventListener(Event.ENTER_FRAME, backwardHandler);			this.removeEventListener(Event.ENTER_FRAME, backwardOnceHandler);						super.stop();						this.dispatchEvent(new AnimationEvent(AnimationEvent.STOPPED));		}	}}