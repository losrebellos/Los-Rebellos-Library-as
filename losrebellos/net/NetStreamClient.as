package losrebellos.net {	import losrebellos.events.NetStreamClientEvent;	import losrebellos.net.INetStreamClient;	import losrebellos.utils.ObjectUtils;		import flash.events.EventDispatcher;			/*	 *	 * @author los rebellos	 *	 */	public class NetStreamClient extends EventDispatcher implements INetStreamClient	{		/*		 * 		 * VARIABLES		 * 		 */				//meta data		private var meta_data:Object;		public var duration:Number = 0;		public var framerate:int = 0;		public var width:Number = 0;		public var height:Number = 0;						/*		 * 		 * CONSTRUCTOR		 * 		 */		public function NetStreamClient()		{			//nothing		}						/*		 * 		 * EVENTS		 * 		 */		override public function addEventListener(type : String, listener : Function, useCapture : Boolean = false, priority : int = 0, useWeakReference : Boolean = false) : void		{			useWeakReference;			super.addEventListener(type, listener, useCapture, priority);		}				
		/*		 * 		 * ON META DATA		 * 		 */		public function onMetaData(_meta_data:Object):void		{			parse(_meta_data);						this.dispatchEvent(new NetStreamClientEvent(NetStreamClientEvent.META_DATA_LOADED));		}		protected function parse(_meta_data:Object):void		{			meta_data = _meta_data;						duration = _meta_data["duration"];			framerate = _meta_data["framerate"];			width = _meta_data["width"];			height = _meta_data["height"];		}						/*		 * 		 * CUE POINT		 * 		 */		public function onCuePoint(_cue_point:Object):void		{			_cue_point;			this.dispatchEvent(new NetStreamClientEvent(NetStreamClientEvent.CUE_POINT));		}						/*		 * 		 * IMAGE DATA		 * 		 */		public function onImageData(_image_data:Object):void		{			_image_data;			this.dispatchEvent(new NetStreamClientEvent(NetStreamClientEvent.IMAGE_DATA));		}						/*		 * 		 * PLAY STATUS		 * 		 */		public function onPlayStatus(_play_status:Object):void		{			_play_status;			this.dispatchEvent(new NetStreamClientEvent(NetStreamClientEvent.PLAY_STATUS));		}						/*		 * 		 * TEXT DATA		 * 		 */		public function onTextData(_text_data:Object):void		{			_text_data;			this.dispatchEvent(new NetStreamClientEvent(NetStreamClientEvent.PLAY_STATUS));		}				/*		 * 		 * XMP DATA		 * 		 */		public function onXMPData(_xmp_data:Object):void		{			_xmp_data;			this.dispatchEvent(new NetStreamClientEvent(NetStreamClientEvent.XMP_DATA_ERROR));		}						/*		 * 		 * UTILS		 * 		 */		public function metaDataToString():String		{			return ">>>>> metadata:\n" + ObjectUtils.print(meta_data, "\n");		}	}}