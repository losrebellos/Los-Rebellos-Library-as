package com.losrebellos.math {	import com.losrebellos.utils.collection.ArrayUtils;	/**	 * 	 * @author los rebellos	 * 	 */	public final class MathUtils	{		////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// CONSTANTS
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////		public static const GOLDEN_RATIO:Number		= 1.6180339887;		public static const PI:Number				= Math.PI;		public static const PI_VICINITY:Number		= 3.141592653589793;				////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// MATH		// rewriting of the Math class		// because they're too slow		////////////////////////////////////////////////////////////////////////////////////////////////////////////////		//min		public static function min(x:Number = undefined, y:Number = undefined):Number		{			return (x > y) ? y : x;		}		public static function multipleMin(...args:*):Number		{			if(args.length < 2)			{				throw new Error("MathUtils.multipleMin: need at least 2 arguments");			}						var min:Number = args[0];			for(var i:int = 0; i<args.length; i++)			{				if(args[i] < min)				{					min = args[i];				}			}						return min;		}		//max		public static function max(x:Number = undefined, y:Number = undefined):Number		{			return (x < y) ? y : x;		}		public static function multipleMax(...args:*):Number		{			if(args.length < 2)			{				throw new Error("MathUtils.multipleMax: need at least 2 arguments");			}						var max:Number = args[0];			for(var i:int = 0; i<args.length; i++)			{				if(args[i] > max)				{					max = args[i];				}			}						return max;		}		//abs		public static function abs(x:Number):Number		{			return (x < 0) ? -x : x;		}		//floor		public static function floor(x:Number):int		{//			return int(x);			return x >> 0;		}		//ceil		public static function ceil(x:Number):int		{			return (x % 1) ? (int(x) + 1) : x;		}		//floor		public static function round(x:Number):int		{//			return int(x + .5);			return (x + .5) >> 0;		}		//pow		public static function pow(x:Number, y:int):Number		{			var sum:Number = 1;			for(var i:int = 0; i<y; i++)			{				sum *= x;			}						return sum;		}						////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// RANDOM
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////		//real		public static function randomRealIntervals(...args):Number		{			if(args.length > 1)			{				return randomRealInterval(ArrayUtils.getRandomInArray(args));			}						return randomRealInterval(args[0]);		}		public static function randomRealInterval(interval:Interval):Number		{			return randomReal(interval.min,interval.max);		}		public static function randomReal(min:Number,max:Number):Number		{			return (min == 0 && max == 0) ? 0 : Math.random() * (1 + max - min) + min;		}		//integer		public static function randomIntegerIntervals(...args):Number		{			if(args.length > 1)			{				return randomIntegerInterval(ArrayUtils.getRandomInArray(args));			}						return randomIntegerInterval(args[0]);		}		public static function randomIntegerInterval(interval:Interval):Number		{			return randomInteger(interval.min,interval.max);		}		public static function randomInteger(min:Number,max:Number):Number		{			return (min == 0 && max == 0) ? 0 : floor(Math.random() * (1 + max - min)) + min;		}						////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// UTILS
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////		public static function clamp(value:Number, min:Number = 0, max:Number = 1):Number		{			return (value > max) ? max : ((value < min) ? min : value);		}		// FIBONACCI: n as recursion		public static function fibonacci(n:int):int		{			if(n <= 1)			{				return n;			}			  			return fibonacci(n - 1) + fibonacci(n - 2);		}						////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// TRIGONOMETRY
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////		public static function degreesToRadians(degrees:Number):Number		{			return degrees * PI / 180;		}		public static function radiansToDegrees(radians:Number):Number		{			return radians * 180 / PI;		}	}}