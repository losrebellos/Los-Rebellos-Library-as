package com.losrebellos.old.css {	import com.losrebellos.text.TextFormatPlus;	import com.losrebellos.utils.collection.DictionaryPlus;	import flash.errors.IllegalOperationError;	import flash.text.StyleSheet;	/*	 *	 * @author los rebellos	 *	 */	public final class TextFormats 	{		/*		 *		 * VARIABLES		 *		 */		private var _styleSheets:DictionaryPlus;		private var _textFormats:DictionaryPlus;						/*		 * 		 * CONSTRUCTOR		 * 		 */		public function TextFormats(singleton:SingletonEnforcer)		{			super();						if(!singleton)			{				throw new IllegalOperationError("TextFormats shouldn't be instanciated");			}						_styleSheets = new DictionaryPlus(true);			_textFormats = new DictionaryPlus(true);		}				/*		 * 		 * SINGLETON		 * 		 */		private static var _instance:TextFormats = null;		public static function get instance():TextFormats		{			if(!_instance)			{				_instance = new TextFormats(new SingletonEnforcer);			}						return _instance;		}						/*		 * 		 * REGISTER		 * 		 */		public function registerStyleSheet(id:String, styleSheet:StyleSheet):Array		{			_styleSheets[id] = styleSheet;						for(var i:int = 0; i<styleSheet.styleNames.length; i++)			{				var tfp:TextFormatPlus = new TextFormatPlus();				tfp.setFromCSS(styleSheet.getStyle(styleSheet.styleNames[i]));								_textFormats[cleanName(styleSheet.styleNames[i])] = tfp;			}						return styleSheet.styleNames;		}						/*		 * 		 * GET CSS & FORMAT		 * 		 */		public function getStyleSheet(id:String):StyleSheet		{			return _styleSheets[id] as StyleSheet;		}		public function getStyle(id:String, name:String):Object		{			var styleSheet:StyleSheet = _styleSheets[id];						if(styleSheet)			{				return styleSheet.getStyle(name);			}						return null;		}		public function getTextFormat(name:String):TextFormatPlus		{			return _textFormats[cleanName(name)] as TextFormatPlus;		}						/*		 * 		 * UTILS		 * 		 */		private function cleanName(name:String):String		{			if(name.substr(0, 1) == "." || name.substr(0, 1) == "#")			{				return name.substr(1, name.length - 1);			}						return name;		}	}}class SingletonEnforcer {}