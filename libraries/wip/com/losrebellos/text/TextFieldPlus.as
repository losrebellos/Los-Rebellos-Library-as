package com.losrebellos.text {	import com.losrebellos.display.invalidate.StageManager;	import flash.events.Event;	import flash.geom.Rectangle;	import flash.text.StyleSheet;	import flash.text.TextField;	import flash.text.TextLineMetrics;	/*	 *	 * @author los rebellos - ben@benoitvinay.com	 *	 */	public class TextFieldPlus extends TextField implements ITextFieldPlus	{		////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// CONSTRUCTOR
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////		public function TextFieldPlus()		{			super();						var metrics:TextLineMetrics = this.getLineMetrics(0);			metrics.x = 0;						this.addEventListener(Event.ADDED, addedToStage);		}		private function addedToStage(e:Event):void		{			this.removeEventListener(Event.ADDED, addedToStage);						this.x = _x;			this.y = _y;		}						////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// CSS
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////		protected var _css:String;		public function set css(value:String):void		{			var styleSheet:StyleSheet = new StyleSheet;			styleSheet.parseCSS(_css = value);						super.styleSheet = styleSheet;		}		public function get css():String		{			return _css;		}		public function setSimpleCSSClass(style:String, value:String):void		{			this.htmlText = "<span class='" + style + "'>" + value + "</span>";		}		public function setSimpleCSSID(style:String, value:String):void		{			this.htmlText = "<span id='" + style + "'>" + value + "</span>";		}						////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// SCALE
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////		public function set scale(value:Number):void		{			this.scaleX = this.scaleY = value;		}		public function get scale():Number		{			return (this.scaleX + this.scaleY) / 2;		}						////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// POSITION & SIZE
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////		protected var _gutter:int = 2;		protected var _x:Number = 0;		override public function set x(value:Number):void		{			_x = value;						super.x = value - _gutter;		}		protected var _y:Number = 0;		override public function set y(value:Number):void		{			_y = value;						super.y = value - _gutter;		}		override public function set width(value:Number):void		{			super.width = value + 2 * _gutter;		}		override public function set height(value:Number):void		{			super.height = value + 2 * _gutter;		}		override public function get width():Number		{			return super.width - 2 * _gutter;		}		override public function get height():Number		{			return super.height - 2 * _gutter;		}		public function get boxWidth():Number		{			return super.width;		}		public function get boxHeight():Number		{			return super.height;		}				////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// INDEX
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////		public function set index(value:int):void		{			this.setIndex(value);		}		public function get index():int		{			return this.getIndex();		}		protected function setIndex(value : int):Boolean		{			if(parent)			{				parent.setChildIndex(this, value);				return true;			}						return false;		}		protected function getIndex():int		{			 return parent ? parent.getChildIndex(this) : -1;		}		public function setTopIndex():int		{			if(parent)			{				parent.setChildIndex(this, parent.numChildren - 1);				return parent.numChildren - 1;			}						return -1;		}						////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// INTERACTION
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////		public function set mouse(value:Boolean):void		{			this.mouseEnabled = this.mouseWheelEnabled = value;		}		public function get mouse():Boolean		{			return !this.mouseEnabled && !this.mouseWheelEnabled;		}						////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// EVENTS
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////		override public function addEventListener(type:String, listener:Function, useCapture:Boolean = false, priority:int = 0, useWeakReference:Boolean = true):void		{			super.addEventListener(type, listener, useCapture, priority, useWeakReference);		}						////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// REMOVE / DISPOSE / DESTROY
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////		public function remove(e:Event = null):Boolean		{			if(parent)			{				parent.removeChild(this);				return true;			}						return false;		}		public function dispose(e:Event = null):void		{			remove();						_css = null;		}						////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// INVALIDATE
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////		public function invalidate():void		{			StageManager.addItem(this);		}		// save the resize data		protected var _rect:Rectangle;		public function resize(rect:Rectangle):void		{			_rect = rect;						invalidate();		}		// redraw automatically on stage.invalidate		public function redraw():void		{					}	}}