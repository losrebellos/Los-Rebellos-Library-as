package com.losrebellos.display.bitmap {	import com.losrebellos.display.invalidate.StageManager;	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.errors.IllegalOperationError;	import flash.events.Event;	import flash.geom.Matrix;	import flash.geom.Rectangle;	/*	 *	 * @author los rebellos	 *	 */	public class BitmapPlus extends Bitmap implements IBitmapPlus	{		////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// CONSTRUCTOR
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////		public function BitmapPlus(bitmapData:BitmapData = null, pixelSnapping:String = "auto", smoothing:Boolean = false)		{			super(bitmapData, pixelSnapping, smoothing);		}						////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// SCALE
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////		public function set scale(value:Number):void		{			this.scaleX = this.scaleY = value;		}		public function get scale():Number		{			return (this.scaleX + this.scaleY) / 2;		}						////////////////////////////////////////////////////////////////////////////////////////////////////////////////		// PIXELATE		////////////////////////////////////////////////////////////////////////////////////////////////////////////////		public function pixelate(amount:Number):void		{			var scaleMatrix:Matrix = new Matrix();			var scaleFactor:Number = 1 / amount;						var bmpX:int = scaleFactor * this.bitmapData.width;			if(bmpX < 1)			{				bmpX = 10;			}			var bmpY:int = scaleFactor * this.bitmapData.height;			if(bmpY < 1)			{				bmpY = 10;			}			// scale image down			scaleMatrix.identity();			scaleMatrix.scale(scaleFactor, scaleFactor);			try			{				var tempBmpd:BitmapData = new BitmapData(bmpX, bmpY, true, 0x00ffffff);			}			catch (e:Error)			{				throw new IllegalOperationError("BitmapDataPlus:pixelate => " + amount);			}						tempBmpd.draw(this.bitmapData, scaleMatrix);			// now scale it back			scaleMatrix.identity();			scaleMatrix.scale(amount, amount);						this.bitmapData.draw(tempBmpd,scaleMatrix);		}						////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// CLONE
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////		public function clone():BitmapPlus		{			return createFromBitmap(this);		}		public static function createFromBitmap(b:Bitmap):BitmapPlus		{			var bp:BitmapPlus = new BitmapPlus();			bp.setFromBitmap(b);						return bp;		}						////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// SET
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////		public function setFromBitmap(b:Bitmap):void		{			this.name = b.name;						this.bitmapData = b.bitmapData.clone();			this.pixelSnapping = b.pixelSnapping;			this.smoothing = b.smoothing;						this.x = b.x;			this.y = b.y;			this.width = b.width;			this.height = b.height;			this.rotation = b.rotation;						this.alpha = b.alpha;			this.visible = b.visible;			this.scaleX = b.scaleX;			this.scaleY = b.scaleY;			this.scale9Grid = b.scale9Grid;						this.filters = b.filters;			this.mask = b.mask;			this.blendMode = b.blendMode;			this.transform = b.transform;			this.scrollRect = b.scrollRect;			this.cacheAsBitmap = b.cacheAsBitmap;			this.opaqueBackground = b.opaqueBackground;						this.accessibilityProperties = b.accessibilityProperties;		}						////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// INDEX
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////		public function set index(value:int):void		{			this.setIndex(value);		}		public function get index():int		{			return this.getIndex();		}		protected function setIndex(value:int):Boolean		{			if(parent)			{				parent.setChildIndex(this, value);								return true;			}						return false;		}		protected function getIndex():int		{			return (parent) ? parent.getChildIndex(this) : -1;		}		public function setTopIndex():int		{			if(parent)			{				parent.setChildIndex(this, parent.numChildren - 1);								return parent.numChildren - 1;			}						return -1;		}						////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// EVENTS
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////		override public function addEventListener(type:String, listener:Function, useCapture:Boolean = false, priority:int = 0, useWeakReference:Boolean = true):void		{			super.addEventListener(type, listener, useCapture, priority, useWeakReference);		}						////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// REMOVE / DISPOSE / DESTROY
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////		public function remove(e:Event = null):Boolean		{			if(parent)			{				parent.removeChild(this);								return true;			}						return false;		}		public function dispose(e:Event = null):void		{			remove();						if(bitmapData)			{				bitmapData.dispose();				bitmapData = null;			}		}						////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// INVALIDATE
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////		public function invalidate():void		{			StageManager.addItem(this);		}		// save the resize data		protected var _rect:Rectangle;		public function resize(rect:Rectangle):void		{			_rect = rect;						invalidate();		}		// redraw automatically on stage.invalidate		public function redraw():void		{					}	}}