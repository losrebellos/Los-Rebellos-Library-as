package com.losrebellos.project.media.image {	import com.losrebellos.display.base.SpritePlus;	import com.losrebellos.display.loader.LoaderPlus;	import flash.events.ErrorEvent;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.ProgressEvent;	import flash.events.SecurityErrorEvent;	import flash.net.URLRequest;	import flash.system.LoaderContext;	/*	 *	 * @author los rebellos	 *	 */	public class IMG extends SpritePlus implements IIMG	{		////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// VARIABLES
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////		protected var _container:SpritePlus;						////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// CONSTRUCTOR
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////		public function IMG()		{			super();		}		override protected function createContent():void		{			_container = new SpritePlus();		}		override protected function addContent():void		{			addChild(_container);		}						////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// LOAD
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////		protected var _url:String;		protected var _context:LoaderContext;		protected var _loader:LoaderPlus;		public function load(url:String, context:LoaderContext = null):void		{			_url = url;			_context = context;						if(_loader.content)			{				putImg();			}			else			{				_loader = new LoaderPlus();				addEvents();				_loader.load(new URLRequest(_url), _context);			}		}		protected function putImg():void		{			_container.addChild(_loader.content);						dispatchEvent(new IMGEvent(IMGEvent.COMPLETE));		}				////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// EVENTS
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////		protected function addEvents():void		{			_loader.contentLoaderInfo.addEventListener(ProgressEvent.PROGRESS, onProgress);			_loader.contentLoaderInfo.addEventListener(Event.COMPLETE, onComplete);			_loader.contentLoaderInfo.addEventListener(ErrorEvent.ERROR, onError);			_loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, onError);			_loader.contentLoaderInfo.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onError);		}		protected function removeEvents():void		{			_loader.contentLoaderInfo.removeEventListener(ProgressEvent.PROGRESS, onProgress);			_loader.contentLoaderInfo.removeEventListener(Event.COMPLETE, onComplete);			_loader.contentLoaderInfo.removeEventListener(ErrorEvent.ERROR, onError);			_loader.contentLoaderInfo.removeEventListener(IOErrorEvent.IO_ERROR, onError);			_loader.contentLoaderInfo.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, onError);		}						////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// HANDLERS
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////		protected function onProgress(e:ProgressEvent):void		{			dispatchEvent(new IMGEvent(IMGEvent.PROGRESS, e.bytesLoaded / e.bytesTotal));		}		protected function onComplete(e:Event):void		{			removeEvents();			putImg();		}		protected function onError(e:Event):void		{			removeEvents();			dispatchEvent(new IMGEvent(IMGEvent.ERROR, _url + " (" + e.type + ")"));		}						////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// DISPOSE
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////		override public function dispose(e:Event = null):void		{			super.dispose(e);						_url = null;			_context = null;						_container.removeAllChildren();			_container = null;						try			{				removeEvents();
				_loader.close();
			}			catch(error:Error)			{
				// nothing			}			_loader = null;		}	}}