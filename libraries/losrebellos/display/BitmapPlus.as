package losrebellos.display {	import losrebellos.console.Console;	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.DisplayObject;	import flash.display.Stage;	import flash.events.Event;	import flash.geom.Point;	import flash.geom.Rectangle;	/*	 *	 * @author los rebellos	 *	 */	public class BitmapPlus extends Bitmap implements IBitmapPlus	{		/*		 * 		 * CONSTRUCTOR		 * 		 */		public function BitmapPlus(bitmapData:BitmapData = null, pixelSnapping:String = "auto", smoothing:Boolean = false)		{			super(bitmapData, pixelSnapping, smoothing);						StageManager.registerStage(this);		}						/*		 * 		 * SETTER & GETTER		 * 		 */		public function set scale(value:Number):void		{			this.scaleX = this.scaleY = value;		}		public function get scale():Number		{			return (this.scaleX + this.scaleY) / 2;		}		public function set index(value:int):void		{			this.setIndex(value);		}		public function get index():int		{			return this.getIndex();		}						/*		 * 		 * FROM BITMAP		 * 		 */		public function clone():BitmapPlus		{			return createFromBitmap(this);		}		public function setFromBitmap(b:Bitmap):void		{			this.name = b.name;						this.bitmapData = b.bitmapData;			this.pixelSnapping = b.pixelSnapping;			this.smoothing = b.smoothing;						this.x = b.x;			this.y = b.y;			this.width = b.width;			this.height = b.height;			this.rotation = b.rotation;						this.alpha = b.alpha;			this.visible = b.visible;			this.scaleX = b.scaleX;			this.scaleY = b.scaleY;			this.scale9Grid = b.scale9Grid;						this.filters = b.filters;			this.mask = b.mask;			this.blendMode = b.blendMode;			this.transform = b.transform;			this.scrollRect = b.scrollRect;			this.cacheAsBitmap = b.cacheAsBitmap;			this.opaqueBackground = b.opaqueBackground;						this.accessibilityProperties = b.accessibilityProperties;		}		public static function createFromBitmap(b:Bitmap):BitmapPlus		{			var bp:BitmapPlus = new BitmapPlus();			bp.setFromBitmap(b);			return bp;		}						/*		 * 		 * INDEX UTILS		 * 		 */		protected function setIndex(value : int):Boolean		{			if(parent)			{				parent.setChildIndex(this, value);				return true;			}			else			{				Console.output(this, "setIndex:");				Console.output("", "- parent: " + parent);				Console.output("", "");			}			return false;		}		protected function getIndex():int		{			if(parent)				return parent.getChildIndex(this);			else			{				Console.output(this, "getIndex:");				Console.output("", "- parent: " + parent);				Console.output("", "");			}			return -1;		}		public function setTopIndex():int		{			if(parent)			{				parent.setChildIndex(this, parent.numChildren - 1);				return parent.numChildren - 1;			}			else			{				Console.output(this, "setTopIndex:");				Console.output("", "- parent: " + parent);				Console.output("", "");			}			return -1;		}						/*		 * 		 * EVENTS		 * 		 */		override public function addEventListener(type:String, listener:Function, useCapture:Boolean = false, priority:int = 0, useWeakReference:Boolean = true):void		{			super.addEventListener(type, listener, useCapture, priority, useWeakReference);		}						/*		 * 		 * UTILS		 * 		 */		public function dispose(e:Event = null):DisplayObject		{			if(parent)				return parent.removeChild(this);			else			{				Console.output(this, "dispose:");				Console.output("", "- parent: " + parent);				Console.output("", "- event: " + e);				Console.output("", "");			}			return null;		}		public function get managedStage():Stage		{			return StageManager.getStage();		}						/*		 * 		 * POSITION		 * 		 */		public function position(point:Point):void		{			this.x = point.x;			this.y = point.y;		}						/*		 * 		 * RESIZE		 * 		 */		public function resize(rect:Rectangle):void		{					}	}}