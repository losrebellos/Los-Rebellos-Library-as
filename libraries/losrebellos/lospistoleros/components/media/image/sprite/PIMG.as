package losrebellos.lospistoleros.components.media.image.sprite {	import losrebellos.events.IMGEvent;	import losrebellos.lospistoleros.core.model.sprite.IPModelSprite;	import losrebellos.lospistoleros.core.view.sprite.PSprite;	import losrebellos.media.Library;	import flash.events.ErrorEvent;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.ProgressEvent;	import flash.events.SecurityErrorEvent;	import flash.net.URLRequest;	import flash.system.LoaderContext;	/*	 *	 * @author los rebellos	 *	 */	public class PIMG extends PSprite 	{		/*		 * 		 * VARIABLES		 * 		 */		private var url:String;						/*		 * 		 * CONSTRUCTOR		 * 		 */		public function PIMG(name:String = null)		{			super(name);		}		override public function initialize():void		{					}		override public function finalize():void		{			removeEvents();		}						/*		 * 		 * MVC		 * 		 */		override protected function createModel():IPModelSprite		{			return new PIMGModelSprite();		}				/*		 * 		 * CONTENT		 * 		 */		public function load(_url:String, _context:LoaderContext):void		{			url = _url;						if(Library.instance.hasItem(url))			{				putImg();			}			else			{				addEvents();				(_model as PIMGModelSprite).load(new URLRequest(url), _context);			}		}		protected function putImg():void		{			this.addChild(Library.instance.getItemAsBitmap(url));						this.dispatchEvent(new IMGEvent(IMGEvent.COMPLETE));		}				/*		 * 		 * EVENTS		 * 		 */		override protected function addEvents():void		{			_model.addEventListener(ProgressEvent.PROGRESS,progressHandler);			_model.addEventListener(Event.COMPLETE,completeHandler);			_model.addEventListener(ErrorEvent.ERROR,errorHandler);			_model.addEventListener(IOErrorEvent.IO_ERROR, errorHandler);			_model.addEventListener(SecurityErrorEvent.SECURITY_ERROR, errorHandler);		}		override protected function removeEvents():void		{			_model.removeEventListener(ProgressEvent.PROGRESS,progressHandler);			_model.removeEventListener(Event.COMPLETE,completeHandler);			_model.removeEventListener(ErrorEvent.ERROR,errorHandler);			_model.removeEventListener(IOErrorEvent.IO_ERROR, errorHandler);			_model.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, errorHandler);		}						/*		 * 		 * HANDLERS		 * 		 */		protected function progressHandler(e:ProgressEvent):void		{			this.dispatchEvent(new IMGEvent(IMGEvent.PROGRESS, e.bytesLoaded / e.bytesTotal));		}		protected function completeHandler(e:Event):void		{			removeEvents();						Library.instance.addItem(url, (_model as PIMGModelSprite).getBitmap());						putImg();		}		protected function errorHandler(e:Event):void		{			removeEvents();						this.dispatchEvent(new IMGEvent(IMGEvent.ERROR, ">>>>> IMG error: " + url + "(" + e.type + ")"));		}	}}