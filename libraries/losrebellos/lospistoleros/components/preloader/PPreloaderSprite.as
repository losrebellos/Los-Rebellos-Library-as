package losrebellos.lospistoleros.components.preloader {	import losrebellos.console.Console;	import losrebellos.lospistoleros.components.container.PContainerSprite;	import losrebellos.lospistoleros.core.controller.IPController;	import losrebellos.lospistoleros.core.model.IPModel;	import losrebellos.lospistoleros.core.view.PSprite;	import losrebellos.lospistoleros.data.Content;	import losrebellos.lospistoleros.events.PPreloaderEvent;	import com.pixelbreaker.ui.osx.MacMouseWheel;	import flash.events.Event;	/*	 *	 * @author los rebellos	 *	 */	public class PPreloaderSprite extends PSprite	{		/*		 * 		 * VARIABLES		 * 		 */		protected var percent:Number = 0;		protected var container:PContainerSprite;						/*		 * 		 * CONSTRUCTOR		 * 		 */		public function PPreloaderSprite() {			super();						this.addEventListener(Event.ADDED_TO_STAGE, addedToStage);						//assets			_model.addEventListener(PPreloaderEvent.PROGRESS, progressHandler);			_model.addEventListener(PPreloaderEvent.COMPLETE, completeHandler);			_model.addEventListener(PPreloaderEvent.ERROR, errorHandler);		}						/*		 * 		 * MVC		 * 		 */		override protected function createModel():IPModel		{			return new PPreloaderModel;		}		override protected function createController():IPController		{			return new PPreloaderController(_model, this);		}				/*		 * 		 * CONTENT		 * 		 */		override protected function createContent():void		{			container = new PContainerSprite;			this.addChild(container);		}						/*		 * 		 * STAGE		 * 		 */		protected function addedToStage(e:Event):void		{			this.removeEventListener(Event.ADDED_TO_STAGE, addedToStage);						initMouseWheel();			initStage();			initFlashVars();						(_controller as PPreloaderController).load();						resizeHandler();		}		protected function addMainToContainer():void		{			container.addMain((_model as PPreloaderModel).getMain());		}		protected function initMouseWheel():void		{			MacMouseWheel.setup(stage);		}		protected function initStage():void		{			var m:PPreloaderModel = _model as PPreloaderModel;			stage.scaleMode = m.getStage().scale;			stage.align = m.getStage().align;			stage.quality = m.getStage().quality;			stage.addEventListener(Event.RESIZE,resizeHandler);		}		protected function resizeHandler(e:Event = null):void		{					}						/*		 * 		 * FLASH VARS		 * 		 */		protected function initFlashVars():void		{			try			{				var param:Object = root.loaderInfo.parameters;				for(var key:String in param)				{					//set the language					if(Content.LANGUAGE == key)						Content.instance.setLanguage(String(param[key]));				}			}			catch (error:Error)			{				Console.output(this, "flash vars error: " + error.name);			}						(_controller as PPreloaderController).setLanguage(Content.instance.getLanguage());		}				/*		 * 		 * HANDLERS		 * 		 */		protected function progressHandler(e:PPreloaderEvent):void		{			percent = e.percent_loaded;		}		protected function completeHandler(e:PPreloaderEvent):void		{			_model.removeEventListener(PPreloaderEvent.PROGRESS, progressHandler);			_model.removeEventListener(PPreloaderEvent.COMPLETE, completeHandler);			_model.removeEventListener(PPreloaderEvent.ERROR, errorHandler);						percent = 1;						addMainToContainer();		}		protected function errorHandler(e:PPreloaderEvent):void		{			_model.removeEventListener(PPreloaderEvent.PROGRESS, progressHandler);			_model.removeEventListener(PPreloaderEvent.COMPLETE, completeHandler);			_model.removeEventListener(PPreloaderEvent.ERROR, errorHandler);						Console.output(this, "errorHandler!!!");		}	}}