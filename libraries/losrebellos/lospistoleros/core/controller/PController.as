package losrebellos.lospistoleros.core.controller {	import losrebellos.events.EventDispatcherPlus;	import losrebellos.lospistoleros.core.command.IPCommand;	import losrebellos.lospistoleros.core.dispatcher.PDispatcher;	import losrebellos.lospistoleros.core.model.IPModel;	import losrebellos.lospistoleros.core.view.IPView;	import flash.errors.IllegalOperationError;	/*	 *	 * @author los rebellos	 *	 */	public class PController extends EventDispatcherPlus implements IPController 	{		/*		 * 		 * CONSTRUCTOR		 * 		 */		public function PController(m:IPModel, v:IPView = null, name:String = null, type:String = null) 		{			super();						_NAME = name;			_TYPE = type;						saveModel(m);			saveView(v);						PDispatcher.instance.registerController(this);		}						/*		 * 		 * MVC		 * 		 */		protected function saveModel(m:IPModel):void		{			throw new IllegalOperationError("PController.saveModel need to be overridden");		}		protected function saveView(v:IPView):void		{			throw new IllegalOperationError("PController.saveView need to be overridden");		}						/*		 * 		 * NAME		 * 		 */		protected var _NAME:String = null;		public function set NAME(value:String):void		{			_NAME = value;		}		public function get NAME():String		{			return _NAME;		}						/*		 * 		 * TYPE		 * 		 */		protected var _TYPE:String = null;		public function set TYPE(value:String):void		{			_TYPE = value;		}		public function get TYPE():String		{			return _TYPE;		}						/*		 * 		 * EVENTS		 * 		 */		public function initialize():void		{					}		public function finalize():void		{					}						/*		 * 		 * RETRIEVE MODEL, VIEW, CONTROLLER & COMMAND BY NAME OR NAMES		 * 		 */		protected function retrieveModelByName(name:String):IPModel		{			return PDispatcher.instance.retrieveModelByName(name);		}		protected function retrieveModelsByName(name:String):Array		{			return PDispatcher.instance.retrieveModelsByName(name);		}		protected function retrieveViewByName(name:String):IPView		{			return PDispatcher.instance.retrieveViewByName(name);		}		protected function retrieveViewsByName(name:String):Array		{			return PDispatcher.instance.retrieveViewsByName(name);		}		protected function retrieveControllerByName(name:String):IPController		{			return PDispatcher.instance.retrieveControllerByName(name);		}		protected function retrieveControllersByName(name:String):Array		{			return PDispatcher.instance.retrieveControllersByName(name);		}		protected function retrieveCommandByName(name:String):IPCommand		{			return PDispatcher.instance.retrieveCommandByName(name);		}		protected function retrieveCommandsByName(name:String):Array		{			return PDispatcher.instance.retrieveCommandsByName(name);		}						/*		 * 		 * RETRIEVE MODEL, VIEW, CONTROLLER & COMMAND BY TYPE		 * 		 */		public function retrieveByType(type:String):Array		{			return PDispatcher.instance.retrieveByType(type);		}		protected function getAllModels():Array		{			return PDispatcher.instance.getAllModels();		}		protected function getAllViews():Array		{			return PDispatcher.instance.getAllViews();		}		protected function getAllControllers():Array		{			return PDispatcher.instance.getAllControllers();		}		protected function getAllCommands():Array		{			return PDispatcher.instance.getAllCommands();		}				/*		 * 		 * RETRIEVE MODEL, VIEW, CONTROLLER & COMMAND BY CONSTRUCTOR		 * 		 */		protected function retrieveModelsByConstructor(constructor:Object):Array		{			return PDispatcher.instance.retrieveModelsByConstructor(constructor);		}		protected function retrieveViewsByConstructor(constructor:Object):Array		{			return PDispatcher.instance.retrieveViewsByConstructor(constructor);		}		protected function retrieveControllersByConstructor(constructor:Object):Array		{			return PDispatcher.instance.retrieveControllersByConstructor(constructor);		}		protected function retrieveCommandsByConstructor(constructor:Object):Array		{			return PDispatcher.instance.retrieveCommandsByConstructor(constructor);		}						/*		 * 		 * EXECUTE COMMAND		 * 		 */		protected function executeCommand(name:String):Boolean		{			return PDispatcher.instance.executeCommand(name);		}		protected function executeCommandsByConstructor(constructor:Object):Boolean		{			return PDispatcher.instance.executeCommandsByConstructor(constructor);		}	}}