package losrebellos.media.stream {	import losrebellos.events.NetStreamClientEvent;	import losrebellos.media.Library;	import losrebellos.net.Metadata;	import losrebellos.net.NetStatus;	import losrebellos.net.NetStreamClient;	import flash.events.AsyncErrorEvent;	import flash.events.Event;	import flash.events.NetStatusEvent;	import flash.media.SoundTransform;	import flash.net.NetConnection;	import flash.net.NetStream;	/*	 *	 * @author los rebellos	 *	 */	public class VideoStream extends Stream implements IStream	{		/*		 * 		 * VARIABLES		 * 		 */		protected var _connection:NetConnection;		protected var _client:NetStreamClient;		public var stream:NetStream;				/*		 * 		 * CONSTRUCTOR		 * 		 */		public function VideoStream(id:String, src:String, loop:int = 1, minBuffer:Number = 0)		{			super(id, src, loop, minBuffer);		}						/*		 * 		 * STREAM		 * 		 */		override protected function createStream():void		{			_connection = new NetConnection;			_connection.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);			_connection.connect(null);						_client = new NetStreamClient;			_client.addEventListener(NetStreamClientEvent.META_DATA_LOADED, metaDataHandler);						stream = new NetStream(_connection);			stream.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);			stream.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);			stream.client = _client;		}		override protected function getStream():void		{			//need to be tested!!!			_client = Library.instance.getItem(_id + "/netStreamClient") as NetStreamClient;			stream = Library.instance.getItem(_id) as NetStream;		}						/*		 * 		 * SOUND TRANSFORM		 * 		 */		override public function set soundTransform(value:SoundTransform):void		{			stream.soundTransform = value;		}		override public function get soundTransform():SoundTransform		{			return stream.soundTransform;		}		
		
		/*		 * 		 * DATA		 * 		 */		override public function getPercentLoaded():Number		{			return stream.bytesLoaded / stream.bytesTotal;		}		override public function getPercentPlayed():Number		{			if(_client && _client.getMetadata().duration)				return stream.time / _client.getMetadata().duration;						return 0;		}				/*		 * 		 * LOAD		 * 		 */		override public function load():void		{			super.load();						stream.play(_src);			stream.pause();						_progress.addEventListener(Event.ENTER_FRAME, progressHandler);		}						/*		 * 		 * CONTROLS		 * 		 */		override public function play(percent:Number = 0, loop:int = 1):void		{			super.play(percent, loop);						stream.seek(_percent * _client.getMetadata().duration);			stream.resume();		}		override public function resume():void		{			super.resume();						stream.resume();		}		override public function pause():void		{			super.pause();						stream.pause();		}		override public function stop():void		{			super.stop();						stream.pause();			stream.close();		}		override public function seek(percent:Number):void		{			super.seek(percent);						stream.seek(_percent * _client.getMetadata().duration);		}						/*		 * 		 * NET STATUS		 * 		 */		protected function progressHandler(e:Event):void		{			streamProgress();			streamReady();						if(this.getPercentLoaded() >= 1)			{				_progress.removeEventListener(Event.ENTER_FRAME, progressHandler);				streamLoaded();			}		}		protected function netStatusHandler(e:NetStatusEvent):void		{			switch(NetStatus.getStatus(e).code)			{				case NetStatus.PLAY_STREAM_NOT_FOUND:					streamNotFound();					break;								case NetStatus.PLAY_START:					streamStart();					break;								case NetStatus.PLAY_STOP:					streamComplete();					break;								case NetStatus.PAUSE:					streamPaused();					break;								case NetStatus.UNPAUSE:					streamResume();					break;								case NetStatus.BUFFER_EMPTY:					streamBufferEmpty();					break;								case NetStatus.BUFFER_FULL:					streamBufferFull();					break;			}		}						/*		 * 		 * ASYNC ERROR		 * 		 */		protected function asyncErrorHandler(e:AsyncErrorEvent):void		{			streamError(e);		}				/*		 * 		 * METADATA		 * 		 */		protected function metaDataHandler(e:NetStreamClientEvent):void		{			_client.removeEventListener(NetStreamClientEvent.META_DATA_LOADED, metaDataHandler);			_client.metaDataToString();						streamInitialized();		}		public function getNetStreamClient():NetStreamClient		{			return _client;		}		public function getMetadata():Metadata		{			return _client.getMetadata();		}						/*		 * 		 * UTILS		 * 		 */		override public function destroy():void		{			super.destroy();						if(_progress.hasEventListener(Event.ENTER_FRAME))				_progress.addEventListener(Event.ENTER_FRAME, progressHandler);						stream.pause();			stream.close();		}	}}