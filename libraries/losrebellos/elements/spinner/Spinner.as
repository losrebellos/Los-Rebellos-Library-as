package losrebellos.elements.spinner {	import losrebellos.display.SpritePlus;	import losrebellos.math.MathUtils;	import flash.display.DisplayObject;	import flash.errors.IllegalOperationError;	import flash.events.Event;	/*	 *	 * @author los rebellos	 *	 */	public class Spinner extends SpritePlus 	{		/*		 * 		 * VARIABLES		 * 		 */		protected var SPEED:int = 1;		protected var CIRCLE:Number = 1;				private var _frameCounter:int = 0;		private var _petal:Class;		private var _petals:int;		private var _currentPetal:int = 0;		private var _tabPetals:Array = [];						/*		 * 		 * CONSTRUCTOR		 * 		 */		public function Spinner(petal:Class = null, petals:int = 9)		{			_petal = petal ? petal : Petal;			_petals = petals;						checkPetal();						super();						this.mouse = false;			this.alpha = 0;		}						/*		 * 		 * CONTENT		 * 		 */		protected function checkPetal():void		{			if(!(new _petal() is IPetal))			{				throw new IllegalOperationError(">>>>> Spinner class need an object implementing IPetal");			}		}		override protected function createContent():void		{			for(var i:int = 0; i<_petals; i++)			{				_tabPetals.push(new _petal());			}		}		override protected function addContent():void		{			for(var i:int = 0; i<_tabPetals.length; i++)			{				var petal:IPetal = _tabPetals[i];				petal.rotation = i * 360 / _petals;				petal.initialize();								this.addChild(petal as DisplayObject);			}		}						/*		 * 		 * SPIN		 * 		 */		public function start():void		{			_frameCounter = 0;						this.alpha = 1;			this.addEventListener(Event.ENTER_FRAME, spinHandler);		}		public function stop():void		{			this.alpha = 0;			this.removeEventListener(Event.ENTER_FRAME, spinHandler);		}		protected function spinHandler(e:Event):void		{			_frameCounter++;						if(_frameCounter % SPEED == 0)			{				var petal:IPetal;								// go throught the CIRCLE petals				var _petalCounter:int = 0;				var _tabPetalsLength:int = _tabPetals.length;				var _circlePetalsLength:int = MathUtils.round(CIRCLE * _tabPetalsLength);				for(var i:int = 0; i<_circlePetalsLength; i++)				{					petal = _tabPetals[_currentPetal + _petalCounter];					petal.progress(i / (_circlePetalsLength - 1));										_petalCounter++;					if(_currentPetal + _petalCounter >= _tabPetalsLength)					{						_petalCounter = -_currentPetal;					}				}								// targetted petal				_currentPetal++;				if(_currentPetal > _petals - 1)				{					_currentPetal = 0;				}			}		}						/*		 * 		 * DISPOSE		 * 		 */		override public function dispose(e:Event = null):DisplayObject		{			for(var i:int = 0; i<_tabPetals.length; i++)			{				var petal:IPetal = _tabPetals[i];				petal.finalize();				petal.dispose(e);			}						return super.dispose(e);		}	}}