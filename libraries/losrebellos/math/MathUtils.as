package losrebellos.math {	import losrebellos.console.Console;	import losrebellos.utils.ArrayUtils;			/**	 * 	 * @author los rebellos	 * 	 */	public class MathUtils {				//golden ratio		public static var GOLDEN_RATIO:Number = 1.6180339887;						//random real		public static function randomReal(...args):Number		{			if(args.length > 1)				return randomRealInterval(ArrayUtils.getRandomInArray(args));			else if(args.length == 1)				return randomRealInterval(args[0]);						Console.output("MathUils", "No Interval in randomReal");			return Number.NaN;		}		public static function randomRealInterval(interval:Interval):Number		{			if(interval.correct)				return randomRealSimple(interval.min,interval.max);			else				return interval.min;		}		public static function randomRealSimple(min:Number,max:Number):Number		{			return Math.random() * (1 + max - min) + min;		}		//random integer		public static function randomInteger(...args):Number		{			if(args.length > 1)				return randomIntegerInterval(ArrayUtils.getRandomInArray(args));			else if(args.length == 1)				return randomIntegerInterval(args[0]);						Console.output("MathUils", "No Interval in randomInteger");			return Number.NaN;		}		public static function randomIntegerInterval(interval:Interval):Number		{			if(interval.correct)				return randomIntegerSimple(interval.min,interval.max);			else				return interval.min;		}		public static function randomIntegerSimple(min:Number,max:Number):Number		{			return Math.floor(Math.random() * (1 + max - min)) + min;		}						//degrees to radians		public static function degreesToRadians(degrees:Number):Number		{			return degrees * Math.PI / 180;		}						//radians to degrees		public static function radiansToDegrees(radians:Number):Number		{			return radians * 180 / Math.PI;		}						//get the round with x zero precision		public static function roundExtra(num:Number, precision:int):Number		{			var precise:int = Math.pow(10, precision);			return Math.floor( precise * num ) / precise;		}						//check percent		public static function checkPercent(percent:Number):Number		{			return ( percent > 1 ) ? ( 1 ) : ( percent < 0 ? 0 : percent );		}			}}