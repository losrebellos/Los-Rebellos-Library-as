package losrebellos.text {	import losrebellos.console.Console;	import flash.display.DisplayObject;	import flash.events.Event;	import flash.geom.Point;	import flash.geom.Rectangle;	import flash.text.StyleSheet;	import flash.text.TextField;	import flash.text.TextLineMetrics;	/*	 *	 * @author los rebellos	 *	 */	public class TextFieldPlus extends TextField implements ITextFieldPlus	{		/*		 * 		 * VARIABLES		 * 		 */		private var gutter:int = 2;		private var _x:Number = 0;		private var _y:Number = 0;		protected var _css:String;						/*		 * 		 * CONSTRUCTOR		 * 		 */		public function TextFieldPlus() {			super();						var metrics:TextLineMetrics = this.getLineMetrics(0);			metrics.x = 0;						this.addEventListener(Event.ADDED, addedToStage);		}		private function addedToStage(e:Event):void		{			this.removeEventListener(Event.ADDED, addedToStage);						this.x = _x;			this.y = _y;		}				/*		 * 		 * SETTER & GETTER		 * 		 */		public function set scale(value:Number):void		{			this.scaleX = this.scaleY = value;		}		public function get scale():Number		{			return (this.scaleX + this.scaleY) / 2;		}		public function set index(value:int):void		{			this.setIndex(value);		}		public function get index():int		{			return this.getIndex();		}		public function set css(value:String):void		{			_css = value;						var style_sheet:StyleSheet = new StyleSheet;			style_sheet.parseCSS(value);						super.styleSheet = style_sheet;		}		public function get css():String		{			return _css;		}		public function setSimpleCSSClass(style:String, value:String):void		{			this.htmlText = "<span class='" + style + "'>" + value + "</span>";		}		public function setSimpleCSSID(style:String, value:String):void		{			this.htmlText = "<span id='" + style + "'>" + value + "</span>";		}						/*		 * 		 * POSITION		 * 		 */		override public function set x(value:Number):void		{			this._x = value;			super.x = value - gutter;		}		override public function set y(value:Number):void		{			this._y = value;			super.y = value - gutter;		}						/*		 * 		 * SIZE		 * 		 */		override public function set width(value:Number):void		{			super.width = value + 2 * gutter;		}		override public function set height(value:Number):void		{			super.height = value + 2 * gutter;		}		override public function get width():Number		{			return super.width - 2 * gutter;		}		override public function get height():Number		{			return super.height - 2 * gutter;		}		public function get boxWidth():Number		{			return super.width;		}		public function get boxHeight():Number		{			return super.height;		}				/*		 * 		 * INDEX UTILS		 * 		 */		protected function setIndex(value : int):Boolean		{			if(parent)			{				parent.setChildIndex(this, value);				return true;			}			else			{				Console.output(this, "setIndex:");				Console.output("", "- parent: " + parent);				Console.output("", "");			}			return false;		}		protected function getIndex():int		{			if(parent)				return parent.getChildIndex(this);			else			{				Console.output(this, "getIndex:");				Console.output("", "- parent: " + parent);				Console.output("", "");			}			return -1;		}		public function setTopIndex():int		{			if(parent)			{				parent.setChildIndex(this, parent.numChildren - 1);				return parent.numChildren - 1;			}			else			{				Console.output(this, "setTopIndex:");				Console.output("", "- parent: " + parent);				Console.output("", "");			}			return -1;		}						/*		 * 		 * MOUSE		 * 		 */		public function set mouse(value:Boolean):void		{			this.mouseEnabled = this.mouseWheelEnabled = value;		}		public function get mouse():Boolean		{			return !this.mouseEnabled && !this.mouseWheelEnabled;		}						/*		 * 		 * EVENTS		 * 		 */		override public function addEventListener(type:String, listener:Function, useCapture:Boolean = false, priority:int = 0, useWeakReference:Boolean = false):void		{			super.addEventListener(type, listener, useCapture, priority, true);		}						/*		 * 		 * UTILS		 * 		 */		public function dispose(e:Event = null):DisplayObject		{			if(parent)				return parent.removeChild(this);			else			{				Console.output(this, "dispose:");				Console.output("", "- parent: " + parent);				Console.output("", "- event: " + e);				Console.output("", "");			}			return null;		}						/*		 * 		 * POSITION		 * 		 */		public function position(point:Point):void		{			this.x = point.x;			this.y = point.y;		}						/*		 * 		 * RESIZE		 * 		 */		public function resize(rect:Rectangle):void		{					}	}}